
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "MSRDT"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "MSRDT-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('MSRDT')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("MFM_Indicator")
> ### * MFM_Indicator
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: MFM_Indicator
> ### Title: Binary Indicator for Multi-State RDT with Multiple Failure Modes
> ### Aliases: MFM_Indicator
> 
> ### ** Examples
> 
> MFM_Indicator(pivec = c(0.1, 0.2), Rvec = c(0.8, 0.6))
[1] 1
> MFM_Indicator(pivec = c(0.1, 0.2, 0.1), Rvec = c(0.8, 0.6, 0.4))
[1] 1
> MFM_Indicator(pivec = c(0.1, 0.4), Rvec = c(0.8, 0.7))
[1] 0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("MFM_Indicator", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("MFM_consumerrisk")
> ### * MFM_consumerrisk
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: MFM_consumerrisk
> ### Title: Consumer's Risk for Multi-State RDT with Multiple Failure Modes
> ### Aliases: MFM_consumerrisk
> 
> ### ** Examples
> 
> pi1 <- pi_MCSim_beta(M = 5000, seed = 10, a = 1, b = 1)
> pi2 <- pi_MCSim_beta(M = 5000, seed = 10, a = 2, b = 18)
> MFM_consumerrisk(n = 10, cvec = c(1, 1), pivec = cbind(pi1, pi2), Rvec = c(0.8, 0.7))
[1] 0.2024741
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("MFM_consumerrisk", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("MFM_core")
> ### * MFM_core
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: MFM_core
> ### Title: Probability Core for Multi-State RDT with Multiple Failure Modes
> ### Aliases: MFM_core
> 
> ### ** Examples
> 
> #Example for two failure modes
> pi1 <- pi_MCSim_beta(M = 5000, seed = 10, a = 1, b = 1)
> pi2 <- pi_MCSim_beta(M = 5000, seed = 10, a = 2, b = 18)
> MFM_core(n = 10, cvec = c(1, 1), pivec = c(pi1[1], pi2[1]));
[1] 0.00885204
> #The function also works for more than two failure modes,
> however, may increase the computation cost.
Error: unexpected ',' in "however,"
Execution halted
